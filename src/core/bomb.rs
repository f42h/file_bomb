/* 
* MIT License
* 
* Copyright (c) 2025 f42h
* 
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

use std::{fs::File, io::{BufWriter, Write}, process::exit};
use std::fs::OpenOptions;
use std::sync::atomic::{AtomicBool, Ordering};
use std::sync::Arc;
use std::time::Instant;

use crate::core::content::get_random_string;

pub struct FileBomb {
    filename: &'static str
}

impl FileBomb {
    pub fn new(filename: &'static str) -> Self {
        FileBomb { 
            filename
        }
    }

    fn create_file(&self) {
        let file = match File::create(self.filename) {
            Ok(file) => file,
            Err(err) => {
                eprintln!("Failed to create test file \"{}\": {}", self.filename, err);
                exit(1);
            }
        };
    
        let mut writer = BufWriter::new(file);
        let content = String::from("This test file was generated by FileBomb!\n\n");
    
        writer.write(content.as_bytes()).expect("Unable to write to test file!");
    
        println!("File generated: {}", self.filename);
    }
    
    fn append_payload(&self, stream: &mut File, payload: String, size: &mut u64) {
        *size = stream.metadata().unwrap().len();

        print!("\rWriting payload to {} [{} bytes].. ({})", self.filename, size, payload.clone());
        if let Err(err) = write!(stream, "{}", payload) {
            eprintln!("Unable to append to {}: {}", self.filename, err);
        }
    } 

    pub fn generate_test_file(&self) {
        let now = Instant::now();

        self.create_file();
        println!("Generating content.. Press Ctrl+C to interrupt!");

        let mut size: u64 = 0;

        let running = Arc::new(AtomicBool::new(true));
        let r = running.clone();
        ctrlc::set_handler(move || {
            r.store(false, Ordering::SeqCst);
        }).unwrap();

        let mut options = OpenOptions::new()
            .write(true)
            .append(true)
            .open(self.filename)
            .expect(&format!("Failed to open {}!", self.filename));
    
        while running.load(Ordering::SeqCst) {
            let payload = get_random_string();
            self.append_payload(&mut options, payload, &mut size);
        }

        let elapsed = now.elapsed();

        println!("\rOK! Generated test file with size of {} bytes{:>100}", size, " ");
        println!("Finished in: {:.2?}", elapsed);
    }
}

